Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> sentence
Rule 2     sentence -> atomsentence
Rule 3     sentence -> complexsentence
Rule 4     complexsentence -> ( sentence )
Rule 5     complexsentence -> ~ sentence
Rule 6     complexsentence -> sentence | sentence
Rule 7     complexsentence -> sentence & sentence
Rule 8     complexsentence -> sentence IMPLY sentence
Rule 9     predicate -> NAME
Rule 10    atomsentence -> predicate ( terms )
Rule 11    terms -> term
Rule 12    terms -> term , terms
Rule 13    term -> constant
Rule 14    term -> VARIABLE
Rule 15    constant -> NAME

Terminals, with rules where they appear

&                    : 7
(                    : 4 10
)                    : 4 10
,                    : 12
IMPLY                : 8
NAME                 : 9 15
VARIABLE             : 14
error                : 
|                    : 6
~                    : 5

Nonterminals, with rules where they appear

atomsentence         : 2
complexsentence      : 3
constant             : 13
predicate            : 10
sentence             : 1 4 5 6 6 7 7 8 8
statement            : 0
term                 : 11 12
terms                : 10 12

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . sentence
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 1
    complexsentence                shift and go to state 3
    statement                      shift and go to state 4
    atomsentence                   shift and go to state 8

state 1

    (1) statement -> sentence .
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    $end            reduce using rule 1 (statement -> sentence .)
    |               shift and go to state 9
    &               shift and go to state 11
    IMPLY           shift and go to state 10


state 2

    (4) complexsentence -> ( . sentence )
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 12
    atomsentence                   shift and go to state 8
    complexsentence                shift and go to state 3

state 3

    (3) sentence -> complexsentence .

    |               reduce using rule 3 (sentence -> complexsentence .)
    &               reduce using rule 3 (sentence -> complexsentence .)
    IMPLY           reduce using rule 3 (sentence -> complexsentence .)
    $end            reduce using rule 3 (sentence -> complexsentence .)
    )               reduce using rule 3 (sentence -> complexsentence .)


state 4

    (0) S' -> statement .



state 5

    (9) predicate -> NAME .

    (               reduce using rule 9 (predicate -> NAME .)


state 6

    (5) complexsentence -> ~ . sentence
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 13
    atomsentence                   shift and go to state 8
    complexsentence                shift and go to state 3

state 7

    (10) atomsentence -> predicate . ( terms )

    (               shift and go to state 14


state 8

    (2) sentence -> atomsentence .

    |               reduce using rule 2 (sentence -> atomsentence .)
    &               reduce using rule 2 (sentence -> atomsentence .)
    IMPLY           reduce using rule 2 (sentence -> atomsentence .)
    $end            reduce using rule 2 (sentence -> atomsentence .)
    )               reduce using rule 2 (sentence -> atomsentence .)


state 9

    (6) complexsentence -> sentence | . sentence
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 15
    atomsentence                   shift and go to state 8
    complexsentence                shift and go to state 3

state 10

    (8) complexsentence -> sentence IMPLY . sentence
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 16
    atomsentence                   shift and go to state 8
    complexsentence                shift and go to state 3

state 11

    (7) complexsentence -> sentence & . sentence
    (2) sentence -> . atomsentence
    (3) sentence -> . complexsentence
    (10) atomsentence -> . predicate ( terms )
    (4) complexsentence -> . ( sentence )
    (5) complexsentence -> . ~ sentence
    (6) complexsentence -> . sentence | sentence
    (7) complexsentence -> . sentence & sentence
    (8) complexsentence -> . sentence IMPLY sentence
    (9) predicate -> . NAME

    (               shift and go to state 2
    ~               shift and go to state 6
    NAME            shift and go to state 5

    predicate                      shift and go to state 7
    sentence                       shift and go to state 17
    atomsentence                   shift and go to state 8
    complexsentence                shift and go to state 3

state 12

    (4) complexsentence -> ( sentence . )
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    )               shift and go to state 18
    |               shift and go to state 9
    &               shift and go to state 11
    IMPLY           shift and go to state 10


state 13

    (5) complexsentence -> ~ sentence .
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    |               reduce using rule 5 (complexsentence -> ~ sentence .)
    &               reduce using rule 5 (complexsentence -> ~ sentence .)
    IMPLY           reduce using rule 5 (complexsentence -> ~ sentence .)
    $end            reduce using rule 5 (complexsentence -> ~ sentence .)
    )               reduce using rule 5 (complexsentence -> ~ sentence .)

  ! |               [ shift and go to state 9 ]
  ! &               [ shift and go to state 11 ]
  ! IMPLY           [ shift and go to state 10 ]


state 14

    (10) atomsentence -> predicate ( . terms )
    (11) terms -> . term
    (12) terms -> . term , terms
    (13) term -> . constant
    (14) term -> . VARIABLE
    (15) constant -> . NAME

    VARIABLE        shift and go to state 21
    NAME            shift and go to state 22

    constant                       shift and go to state 19
    terms                          shift and go to state 20
    term                           shift and go to state 23

state 15

    (6) complexsentence -> sentence | sentence .
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    |               reduce using rule 6 (complexsentence -> sentence | sentence .)
    &               reduce using rule 6 (complexsentence -> sentence | sentence .)
    IMPLY           reduce using rule 6 (complexsentence -> sentence | sentence .)
    $end            reduce using rule 6 (complexsentence -> sentence | sentence .)
    )               reduce using rule 6 (complexsentence -> sentence | sentence .)

  ! |               [ shift and go to state 9 ]
  ! &               [ shift and go to state 11 ]
  ! IMPLY           [ shift and go to state 10 ]


state 16

    (8) complexsentence -> sentence IMPLY sentence .
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    IMPLY           reduce using rule 8 (complexsentence -> sentence IMPLY sentence .)
    $end            reduce using rule 8 (complexsentence -> sentence IMPLY sentence .)
    )               reduce using rule 8 (complexsentence -> sentence IMPLY sentence .)
    |               shift and go to state 9
    &               shift and go to state 11

  ! |               [ reduce using rule 8 (complexsentence -> sentence IMPLY sentence .) ]
  ! &               [ reduce using rule 8 (complexsentence -> sentence IMPLY sentence .) ]
  ! IMPLY           [ shift and go to state 10 ]


state 17

    (7) complexsentence -> sentence & sentence .
    (6) complexsentence -> sentence . | sentence
    (7) complexsentence -> sentence . & sentence
    (8) complexsentence -> sentence . IMPLY sentence

    |               reduce using rule 7 (complexsentence -> sentence & sentence .)
    &               reduce using rule 7 (complexsentence -> sentence & sentence .)
    IMPLY           reduce using rule 7 (complexsentence -> sentence & sentence .)
    $end            reduce using rule 7 (complexsentence -> sentence & sentence .)
    )               reduce using rule 7 (complexsentence -> sentence & sentence .)

  ! |               [ shift and go to state 9 ]
  ! &               [ shift and go to state 11 ]
  ! IMPLY           [ shift and go to state 10 ]


state 18

    (4) complexsentence -> ( sentence ) .

    |               reduce using rule 4 (complexsentence -> ( sentence ) .)
    &               reduce using rule 4 (complexsentence -> ( sentence ) .)
    IMPLY           reduce using rule 4 (complexsentence -> ( sentence ) .)
    $end            reduce using rule 4 (complexsentence -> ( sentence ) .)
    )               reduce using rule 4 (complexsentence -> ( sentence ) .)


state 19

    (13) term -> constant .

    ,               reduce using rule 13 (term -> constant .)
    )               reduce using rule 13 (term -> constant .)


state 20

    (10) atomsentence -> predicate ( terms . )

    )               shift and go to state 24


state 21

    (14) term -> VARIABLE .

    ,               reduce using rule 14 (term -> VARIABLE .)
    )               reduce using rule 14 (term -> VARIABLE .)


state 22

    (15) constant -> NAME .

    ,               reduce using rule 15 (constant -> NAME .)
    )               reduce using rule 15 (constant -> NAME .)


state 23

    (11) terms -> term .
    (12) terms -> term . , terms

    )               reduce using rule 11 (terms -> term .)
    ,               shift and go to state 25


state 24

    (10) atomsentence -> predicate ( terms ) .

    |               reduce using rule 10 (atomsentence -> predicate ( terms ) .)
    &               reduce using rule 10 (atomsentence -> predicate ( terms ) .)
    IMPLY           reduce using rule 10 (atomsentence -> predicate ( terms ) .)
    $end            reduce using rule 10 (atomsentence -> predicate ( terms ) .)
    )               reduce using rule 10 (atomsentence -> predicate ( terms ) .)


state 25

    (12) terms -> term , . terms
    (11) terms -> . term
    (12) terms -> . term , terms
    (13) term -> . constant
    (14) term -> . VARIABLE
    (15) constant -> . NAME

    VARIABLE        shift and go to state 21
    NAME            shift and go to state 22

    constant                       shift and go to state 19
    terms                          shift and go to state 26
    term                           shift and go to state 23

state 26

    (12) terms -> term , terms .

    )               reduce using rule 12 (terms -> term , terms .)

